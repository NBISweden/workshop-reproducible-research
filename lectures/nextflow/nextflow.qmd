---
title: 'Making reproducible workflows with <img src="https://raw.githubusercontent.com/nextflow-io/trademark/master/nextflow-logo-bg-light.png" style="width:50%; padding: 15px 15px 15px 15px">'
format:
    revealjs:
        code-line-numbers: false
---

## Nextflow features

::: {.incremental}
- [Generalisable]{.green}
- [Portable]{.green}
- [Scalable]{.green}
- [Platform-agnostic]{.green}
- Based on [Groovy]{.green} and Java
- Large active community in _e.g._ [nf-core]{.green}
:::

## Nextflow adoption

Nextflow has grown rapidly since its creation, and is the most commonly used
workflow manager in bioinformatics since 2024. ^[*"Empowering bioinformatics
communities with Nextflow and nf-core". Genome Biol 26, 228 (2025)*]

![](images/nextflow-adoption.webp){height=475 fig-align=center}

## Concepts and nomenclature

![](images/concepts.png){height=300 fig-align=center}

::: {.incremental}
- [Channels]{.green} contain data, _e.g._ input files
- [Processes]{.green} run some kind of code, _e.g._ a script or a program
- [Tasks]{.green} are instances of a process, one per process input
- Each task is run in its own, isolated sub-directory
:::

## Anatomy of a process {auto-animate=true}

```groovy
process GET_SRA_BY_ACCESSION {

    input:
    val(sample)

    output:
    path("${sample}.fastq.gz")

    script:
    """
    fastq-dump ${sample} > ${sample}.fastq.gz
    """
}
```

## Anatomy of a process {auto-animate=true}

```groovy
process GET_SRA_BY_ACCESSION {

    input:
    val(sample)

    output:
    tuple val(sample), path("${sample}.fastq.gz")

    script:
    """
    fastq-dump ${sample} > ${sample}.fastq.gz
    """
}
```

## Anatomy of a process {auto-animate=true}

```groovy
process GET_SRA_BY_ACCESSION {

    cpus 2
    memory '8 GB'

    input:
    val(sample)

    output:
    tuple val(sample), path("${sample}.fastq.gz")

    script:
    """
    fastq-dump ${sample} > ${sample}.fastq.gz
    """
}
```

## Anatomy of a process {auto-animate=true}

```groovy
process GET_SRA_BY_ACCESSION {

    cpus 2
    memory '8 GB'

    conda 'sra-tools=2.11.0'
    container 'ncbi/sra-tools:2.11.0'

    input:
    val(sample)

    output:
    tuple val(sample), path("${sample}.fastq.gz")

    script:
    """
    fastq-dump ${sample} > ${sample}.fastq.gz
    """
}
```

## Anatomy of a workflow {auto-animate=true}

```groovy
workflow {

    // Define SRA input data channel
    ch_sra_ids = Channel.fromList ( ["SRR935090", "SRR935091", "SRR935092"] )

    // Define the workflow
    GET_SRA_BY_ACCESSION (
        ch_sra_ids
    )
}
```

## Anatomy of a workflow {auto-animate=true}

```groovy
workflow {

    // Define SRA input data channel
    ch_sra_ids = Channel.fromList ( ["SRR935090", "SRR935091", "SRR935092"] )

    // Define the workflow
    GET_SRA_BY_ACCESSION (
        ch_sra_ids
    )
    RUN_FASTQC (
        GET_SRA_BY_ACCESSION.out
    )
}
```

## Anatomy of a workflow {auto-animate=true}

```groovy
workflow {

    // Define SRA input data channel
    ch_sra_ids = Channel.fromList ( ["SRR935090", "SRR935091", "SRR935092"] )

    // Define the workflow
    GET_SRA_BY_ACCESSION (
        ch_sra_ids
    )
    RUN_FASTQC (
        GET_SRA_BY_ACCESSION.out
    )
    RUN_MULTIQC (
        RUN_FASTQC.out.collect()
    )
}
```

## Executing Nextflow

:::: {.columns}

::: {.column}
::: {.fragment}
Execute a workflow
```bash
$ nextflow run main.nf
```
<br>
:::

::: {.fragment}
Re-run using cached results
```bash
$ nextflow run main.nf -resume
```
<br>
:::

::: {.fragment}
Execute with a specific configuration file
```bash
$ nextflow run main.nf -c nextflow.config
```
<br>
:::
:::

::: {.column}
::: {.fragment}
Supply a custom parameter
```bash
$ nextflow run main.nf --param "value"
```
<br>
:::

::: {.fragment}
Use a pre-defined configuration profile
```bash
$ nextflow run main.nf -profile uppmax
```
<br>
:::

::: {.fragment}
Use Docker or Apptainer
```bash
$ nextflow run main.nf -with-docker
$ nextflow run main.nf -with-apptainer
```
<br>
:::
:::

::::

## Snakemake and Nextflow differences

<br>
<br>

:::: {.columns}

::: {.column width="20%"}
:::

::: {.column width="80%"}
|                | [Snakemake]{.green}  | [Nextflow]{.green}            |
| ----           | ------               | ---------                     |
| **Language**   | Python               | Groovy                        |
| **Data**       | Everything is a file | Can use both files and values |
| **Execution**  | Working directory    | Each job in its own directory |
| **Philosophy** | "Pull"               | "Push"                        |
| **Dry-runs**   | Yes                  | No                            |

<br>

::: {.incremental}
- [Question]{.green}: But, which one is the _best?_
- [Answer]{.green}: Both - it's mostly up to personal preference!
:::

:::
::::


# Questions?

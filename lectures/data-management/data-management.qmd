---
title: Managing your data
format: revealjs
---

## Data (mis)management in practice {.smaller}

|                             | [Raw data]{.green}                | [Metadata]{.green} |
| -----------------           | --------------------------- | --------------------------- |
| [Data acquisition]{.green}  | Data arrives in cumbersome and proprietary format | In researcher's lab journal |
| [Analysis]{.green}          | Gets converted to format of choice. Original files (and conversion settings) are lost | Hard-coded in various analysis scripts |
| [First submission]{.green}  | | Mailed back and forth between collaborators in ever-changing (but nicely coloured) Excel sheets |
| [Review]{.green}            | Leads a quiet life on the HPC cluster, until the project expires and the data has to be urgently retrieved | |
| [Second submission]{.green} | Ends its days on an external hard drive on the researcher's desk | Reformatted and included as PDF in the supplementary |
| [Publication]{.green}       | "Data available upon request" | |

## FAIR data

Strive to make your data FAIR^[_Wilkinson, Mark et al. "The FAIR Guiding
Principles for scientific data management and stewardship". Scientific Data 3,
Article number: 160018 (2016)_] for both machines and humans:

- [**F**]{.green}indable
- [**A**]{.green}ccessible
- [**I**]{.green}nteroperable
- [**R**]{.green}eusable

## Data management plan

::: {.incremental}
- Check [requirements of funding agency]{.green} and field of research
  ^[[VR data management plan](https://www.vr.se/english/calls-and-decisions/grant-terms-and-conditions/data-management-plan.html)]
- Determine [required storage]{.green} space for short and long term
- Provide [helpful metadata]{.green}
- Consider legal/ethical restrictions if working with [sensitive data]{.green}
- Find suitable [data repositories]{.green}
- Strive towards uploading data to its final destination at the [beginning of a
  project]{.green}
:::

## Data sharing

![](https://www.openaccess.nl/sites/www.openaccess.nl/files/documenten/open-access-logo-png-transparent.png){height=250 fig-align=center}

**Why Open Access?**

- Publicly funded research should be [unrestricted]{.green}
- Published results should be [verifiable by others]{.green}
- Enables other to [build upon previous work]{.green}

## Organising your projects

_Which sample file represents the most up to date version?_

```bash
$ ls -l data/
-rw-r--r--  user  staff  Nov 12 22:00 samples.mat
-rw-r--r--  user  staff  Nov 16 11:39 samplesFinal.mat
-rw-r--r--  user  staff  Nov 18 22:41 samplesFinalV2.mat
-rw-r--r--  user  staff  Nov 18 13:25 samplesUSE_THIS_ONE.mat
-rw-r--r--  user  staff  Nov 15 22:39 samplesV2.mat
```

## The project directory

The first step towards working reproducibly: [Get organised!]{.green}

::: {.incremental}
- Divide your work into [distinct projects]{.green}
- Keep all files needed to go from raw data to final results in a dedicated
  directory
- Use [relevant subdirectories]{.green}
:::

## There are many ways to organise a project

::: {.r-stack}

::: {.fragment fragment-index=1}
::: {.fragment .fade-out fragment-index=2}
A simple but effective example is the following:
```bash
code/             Code needed to go from input files to final results
data/             Raw data - this should never edited
doc/              Documentation of the project
env/              Environment-related files, e.g. Conda environments or Dockerfiles
results/          Output from workflows and analyses
README.md         Project description and instructions
```
:::
:::

::: {.fragment fragment-index=2}
::: {.fragment .fade-out fragment-index=3}
A Snakemake-based example: [snakemake-workflows/template](https://github.com/snakemake-workflows/snakemake-workflow-template)
```bash
config/
data/
doc/
env/
results/
workflow/
  Snakefile
LICENSE
README.md
```
:::
:::

::: {.fragment fragment-index=3}
A Nextflow-based example: [fasterius/nbis-support-template](https://github.com/fasterius/nbis-support-template)
```bash
bin/
data/
doc/
env/
results/
README.md
LICENSE
main.nf
nextflow.config
```
:::

:::

## Helpful tools

::: {.fragment}
*Syntax highlighting, autocomplete, Git integration, etc.:*

- [VSCode](https://code.visualstudio.com/)
- [RStudio](https://rstudio.com/)
- [PyCharm](https://www.jetbrains.com/pycharm/)
:::

::: {.fragment}
*Working in an HPC over SSH in the command line:*

- [Nano](https://www.nano-editor.org/)
- [Vim](https://www.vim.org/)
- [Neovim](https://neovim.io/)
- [VSCode via SSH](https://code.visualstudio.com/docs/remote/ssh)
:::

# Questions?

## Topics for discussion

- Do you organise your work in distinct projects?
- How do you organise your files in this context?
- Are you happy with the way you work today?
- Does your group have a data management plan in place?
- Do you know "your" repositories and how to submit data to them?
